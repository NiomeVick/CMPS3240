//Niome Vick
//Lab 01 - Benchmarking
//Albert Cruz - CMPS3240

#include <stdio.h>
#include <stdlib.h>

void dgemm( int length, double *X, double *Y, double *Result ) {
    /* printf("%s \n", "I've made it into the function");    DEBUG STATEMENT */
    for(int i = 0; i < length; ++i)
       for (int j = 0; j < length; ++j)
       {
            double cij = Result[i + j * length]; /* cij = Result[i][j] */
            for (int k = 0; k < length; k++) 
                cij += X[i + k * length] * Y[k + j * length]; /* cij += X[i][k] * Y[k][j] */
            Result[i + j * length] = cij; /* Result[i][j] = cij */
       }
}

//  The benchmark
int main( void ) {
    const int N = 1024; // The benchmark runs on a fixed size of work
    printf( "Running DGEMM operation of size %d x 1\n", N );

    double *X = (double *) malloc( N * N * sizeof(double) );      // First vector
    double *Y = (double *) malloc( N * N * sizeof(double) );      // Second vector
    double *Result = (double *) malloc( N * N * sizeof(double) ); // Result vector

    /*printf("%s \n", "About to carry out operation");    DEBUG STATEMENT */

    // Carry out the operation
    dgemm(N, X, Y, Result);

    /*printf("%s \n", "About to free up memory");    DEBUG STATEMENT */

    // Free up the memory
    free( X );
    free( Y );
    free( Result );

    return 0;
}
